---
# Installing necessary packages
- apt:
    name="{{ item }}"
    state=latest
    update_cache=yes
  with_items:
    - mysql-server
    - python-mysqldb
    - vim
    - git
    - ntp

# Initializing template for my.cnf. Todo make it more dynamic

- template:
    src: my.cnf.j2
    dest: /etc/mysql/my.cnf
  notify:
    - restart mysql

# We need this file for ansible accessing to MySQL

- fetch:
    src: /etc/mysql/debian.cnf
    flat: yes
    dest: "/tmp/my.cnf.{{ ansible_hostname }}"

- copy:
   src: "/tmp/my.cnf.{{ ansible_hostname }}"
   dest: /root/.my.cnf

# Creating mysql_user. Variables are defined in vars/main.yml

- mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: '{{ mysql_user }}.*:ALL'
    state: present

#Creating database

- mysql_db:
   name: "{{ mysql_user }}"
   state: present

#Creating user for replication

- mysql_user:
    name: "replicator"
    host: "%"
    password: "{{ mysql_password }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present
  notify:
    - restart mysql


#Creating user for haproxy checks
- mysql_user:
    name: "{{  haproxy_mysql_user  }}"
    host: "{{ groups.proxy[0] }}"
    state: present

#Configuring replication. We need a flag which shows us that "mysql_replication" has arleady done for this host. This operation should be running once for host. 

- stat: path=/etc/mysql/repl.ansible
  register: check_sql_path


# Enabling mysql replictation on the first mysql server
- mysql_replication:
    mode: changemaster
    master_host: "{{ groups.backend[1] }}"
    master_user: replicator
    master_password: "{{ mysql_password }}"
  when: check_sql_path.stat.exists == false and  inventory_hostname  ==  groups.backend[0]   # It will be applied if there is no file at check_sql_path.
  notify:
    - restart mysql


# Enabling mysql replictation on the first mysql server
- mysql_replication:
   mode: changemaster
   master_host: "{{ groups.backend[0] }}"
   master_user: replicator
   master_password: "{{ mysql_password }}"
  when: check_sql_path.stat.exists == false and inventory_hostname  == groups.backend[1] 
  notify:
   - restart mysql

# If both replications were configured correct, we'll create files on each backend.
- command: touch /etc/mysql/repl.ansible
  when: check_sql_path.stat.exists == false and inventory_hostname  ==  groups.backend[1] 

- command: touch /etc/mysql/repl.ansible
  when: check_sql_path.stat.exists == false and  inventory_hostname  ==  groups.backend[0]


# Printing into stdout server id

- name: Retrieve stdout from mysql
  shell:  mysql --batch --skip-column-names --execute="show variables like 'server_id'"
  register: soutput
  changed_when: False

- name: Printing server-id to stdout
  debug:
    msg: "{{ soutput.stdout_lines }}"
